{
  "version": 3,
  "file": "tests.js",
  "sources": [
    "tmp/transpiled/tests/acceptance/component-test.js",
    "tmp/transpiled/tests/acceptance/helper-test.js",
    "tmp/transpiled/tests/helpers/isolated-container.js",
    "tmp/transpiled/tests/helpers/module-for.js",
    "tmp/transpiled/tests/helpers/resolver.js",
    "tmp/transpiled/tests/helpers/start-app.js",
    "tmp/transpiled/tests/unit/components/pretty-color-test.js",
    "tmp/transpiled/tests/unit/components/template-less-component-test.js",
    "tmp/transpiled/tests/unit/controllers/posts-edit-test.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"appkit/tests/acceptance/component-test\", \n  [],\n  function() {\n    \"use strict\";\n    var App;\n\n    module('Acceptances - Component', {\n      setup: function(){\n        App = startApp();\n      },\n      teardown: function() {\n        Ember.run(App, 'destroy');\n      }\n    });\n\n    test('component output is rendered', function(){\n      expect(2);\n\n      visit('/component-test').then(function(){\n        var list = find('.pretty-color');\n        equal(list.length, 3);\n        equal(list.first().text(), 'Pretty Color: purple\\n');\n      });\n    });\n  });",
    "define(\"appkit/tests/acceptance/helper-test\", \n  [],\n  function() {\n    \"use strict\";\n    var App;\n\n    module(\"Acceptances - Helper\", {\n      setup: function(){\n        App = startApp();\n      },\n      teardown: function() {\n        Ember.run(App, 'destroy');\n      }\n    });\n\n    test(\"helper output is rendered\", function(){\n      expect(1);\n\n      visit('/helper-test').then(function(){\n        ok(exists(\"h3:contains('My name is Ember.')\"));\n      });\n    });\n  });",
    "define(\"appkit/tests/helpers/isolated-container\", \n  [\"appkit/tests/helpers/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n\n    function isolatedContainer(fullNames) {\n      var container = new Ember.Container();\n\n      container.optionsForType('component', { singleton: false });\n      container.optionsForType('view', { singleton: false });\n      container.optionsForType('template', { instantiate: false });\n      container.optionsForType('helper', { instantiate: false });\n\n      for (var i = fullNames.length; i > 0; i--) {\n        var fullName = fullNames[i - 1];\n        container.register(fullName, resolver.resolve(fullName));\n      }\n\n      return container;\n    }\n\n    __exports__[\"default\"] = isolatedContainer;\n  });",
    "define(\"appkit/tests/helpers/module-for\", \n  [\"appkit/tests/helpers/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var __testing_context__;\n\n    var resolver = __dependency1__[\"default\"];\n\n    function defaultSubject(factory, options) {\n      return factory.create(options);\n    }\n\n    function moduleFor(fullName, description, callbacks, delegate) {\n      callbacks = callbacks || { };\n\n      var needs = [fullName].concat(callbacks.needs || []);\n      var container = isolatedContainer(needs);\n\n      callbacks.subject = callbacks.subject || defaultSubject;\n\n      callbacks.setup    = callbacks.setup    || function() { };\n      callbacks.teardown = callbacks.teardown || function() { };\n\n      function factory() {\n        return container.lookupFactory(fullName);\n      }\n\n      function subject(options) {\n        return callbacks.subject(factory(), options);\n      }\n\n      __testing_context__ = {\n        container: container,\n        subject: subject,\n        factory: factory,\n        __setup_properties__: callbacks\n      };\n\n      if (delegate) {\n        delegate(container, __testing_context__);\n      }\n\n      var context = __testing_context__;\n      var _callbacks = {\n        setup: function(){\n          buildContextVariables(context);\n          callbacks.setup.call(context, container);\n        },\n        teardown: function(){\n          Ember.run(function(){\n            container.destroy();\n            // destroy all cached variables\n          });\n\n          Ember.$('#ember-testing').empty();\n          // maybe destroy all the add-hoc objects\n\n          callbacks.teardown(container);\n        }\n      };\n\n      module(description || fullName, _callbacks);\n    }\n\n    __exports__.moduleFor = moduleFor;// allow arbitrary named factories, like rspec let\n    function buildContextVariables(context) {\n      var cache = { };\n      var callbacks = context.__setup_properties__;\n      var factory = context.factory;\n      var container = context.container;\n\n      Ember.keys(callbacks).filter(function(key){\n        // ignore the default setup/teardown keys\n        return key !== 'setup' && key !== 'teardown';\n      }).forEach(function(key){\n        context[key] = function(options) {\n          if (cache[key]) {\n            return cache[key];\n          }\n\n          var result = callbacks[key](factory(), options, container);\n          cache[key] = result;\n          return result;\n        };\n      });\n    }\n\n    function test(testName, callback) {\n      var context = __testing_context__; // save refence\n\n      function wrapper() {\n        var result = callback.call(context);\n\n        function failTestOnPromiseRejection(reason) {\n          ok(false, reason);\n        }\n\n        Ember.run(function(){\n          stop();\n          Ember.RSVP.Promise.cast(result)['catch'](failTestOnPromiseRejection)['finally'](start);\n        });\n      }\n\n      QUnit.test(testName, wrapper);\n    }\n\n    __exports__.test = test;function moduleForModel(name, description, callbacks) {\n      moduleFor('model:' + name, description, callbacks, function(container, context) {\n        // custom model specific awesomeness\n        container.register('store:main', DS.Store);\n        container.register('adapter:application', DS.FixtureAdapter);\n\n        context.__setup_properties__.store = function(){\n          return container.lookup('store:main');\n        };\n\n        if (context.__setup_properties__.subject === defaultSubject) {\n          context.__setup_properties__.subject = function(factory, options) {\n            return Ember.run(function() {\n              return container.lookup('store:main').createRecord(name, options);\n            });\n          };\n        }\n      });\n    }\n\n    __exports__.moduleForModel = moduleForModel;function moduleForComponent(name, description, callbacks) {\n      moduleFor('component:' + name, description, callbacks, function(container, context) {\n        var templateName = 'template:components/' + name;\n\n        var template = resolver.resolve(templateName);\n\n        if (template) {\n          container.register(templateName, template);\n          container.injection('component:' + name, 'template', templateName);\n        }\n\n        context.__setup_properties__.$ = function(selector) {\n          var view = Ember.run(function(){\n            return context.subject().appendTo(Ember.$('#ember-testing')[0]);\n          });\n\n          return view.$();\n        };\n      });\n    }\n\n    __exports__.moduleForComponent = moduleForComponent;\n  });",
    "define(\"appkit/tests/helpers/resolver\", \n  [\"ember/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: 'appkit'\n    };\n\n    __exports__[\"default\"] = resolver;\n  });",
    "define(\"appkit/tests/helpers/start-app\", \n  [\"appkit/app\",\"appkit/router\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Application = __dependency1__[\"default\"];\n    var Router = __dependency2__[\"default\"];\n\n    function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({\n        // useful Test defaults\n        rootElement: '#ember-testing',\n        LOG_ACTIVE_GENERATION:false,\n        LOG_VIEW_LOOKUPS: false\n      }, attrs); // but you can override;\n\n      Router.reopen({\n        location: 'none'\n      });\n\n      Ember.run(function(){\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn't be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n\n    __exports__[\"default\"] = startApp;\n  });",
    "define(\"appkit/tests/unit/components/pretty-color-test\", \n  [\"appkit/tests/helpers/module-for\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var test = __dependency1__.test;\n    var moduleForComponent = __dependency1__.moduleForComponent;\n\n    moduleForComponent('pretty-color');\n\n    test(\"changing colors\", function(){\n      var component = this.subject();\n\n      Ember.run(function(){\n        component.set('name','red');\n      });\n\n      // first call to $() renders the component.\n      equal(this.$().attr('style'), 'color: red;');\n\n      Ember.run(function(){\n        component.set('name', 'green');\n      });\n\n      equal(this.$().attr('style'), 'color: green;');\n    });\n\n    test(\"className\", function(){\n      // first call to this.$() renders the component.\n      ok(this.$().is('.pretty-color'));\n    });\n\n    test(\"template\", function(){\n      var component = this.subject();\n\n      equal($.trim(this.$().text()), 'Pretty Color:');\n\n      Ember.run(function(){\n        component.set('name', 'green');\n      });\n\n      equal($.trim(this.$().text()), 'Pretty Color: green');\n    });\n  });",
    "define(\"appkit/tests/unit/components/template-less-component-test\", \n  [\"appkit/tests/helpers/module-for\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var test = __dependency1__.test;\n    var moduleForComponent = __dependency1__.moduleForComponent;\n\n    moduleForComponent('template-less');\n\n    test(\"template\", function(){\n      var component = this.subject();\n      ok(this.$());\n    });\n  });",
    "define(\"appkit/tests/unit/controllers/posts-edit-test\", \n  [\"appkit/controllers/posts/edit\",\"appkit/tests/helpers/module-for\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var PostsEditController = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n\n    moduleFor('controller:posts/edit', \"Validation\");\n\n    test('it exists', function(){\n      ok(this.subject() instanceof PostsEditController);\n    });\n\n    test('isValid', function(){\n      var controller = this.subject();\n\n      Em.run(function(){\n        controller.set('content', {\n          id: '4',\n          title: 'Apple',\n          code: 'apple'\n        });\n      });\n\n      equal(controller.get('isValid'), true, \"With content unchanged isValid should be true.\");\n\n      Em.run(function(){\n        controller.set(\"code\", \"_apple\");\n      });\n\n      equal(controller.get('isValid'), false, \"Code is invalid so the controller should be invalid.\");\n\n    });\n  });"
  ]
}